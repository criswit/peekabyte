name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: mac

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Electron app
        run: npm run electron:build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload artifacts for each platform
      - name: Upload Linux artifacts
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            release/*.AppImage
            release/*.deb
            release/*.rpm
          if-no-files-found: warn

      - name: Upload Windows artifacts
        if: matrix.platform == 'win'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            release/*.exe
            release/*.msi
          if-no-files-found: warn

      - name: Upload macOS artifacts
        if: matrix.platform == 'mac'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            release/*.dmg
            release/*.pkg
            release/*.zip
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release ${{ github.ref_name }}
            
            ## Downloads
            - **Linux**: AppImage
            - **Windows**: exe installer
            - **macOS**: dmg installer
            
            ## Installation
            
            ### Linux
            ```bash
            chmod +x Markdown-Viewer-*.AppImage
            ./Markdown-Viewer-*.AppImage
            ```
            
            ### Windows
            Run the `.exe` installer
            
            ### macOS
            Open the `.dmg` file and drag the app to Applications
          draft: false
          prerelease: false

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-artifacts/linux-build/Markdown Viewer-*.AppImage
          asset_name: Markdown-Viewer-${{ github.ref_name }}-linux.AppImage
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Windows exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-artifacts/windows-build/*.exe
          asset_name: Markdown-Viewer-${{ github.ref_name }}-win.exe
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload macOS dmg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-artifacts/macos-build/*.dmg
          asset_name: Markdown-Viewer-${{ github.ref_name }}-mac.dmg
          asset_content_type: application/octet-stream
        continue-on-error: true